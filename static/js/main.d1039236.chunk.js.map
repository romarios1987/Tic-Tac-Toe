{"version":3,"sources":["components/Square.jsx","components/Board.jsx","components/Options.jsx","components/StartMenu.jsx","App.js","index.js"],"names":["Square","props","react_default","a","createElement","className","index","gameEnded","onClick","event","markSquare","value","Board","createSquare","_this","board","components_Square","Object","assign","returnMenuHandler","preventDefault","returnMenu","resetGameHandler","resetGame","this","playerCount","humanFirst","computerRandom","_this2","Fragment","Component","Options","id","idName","title","clickHandlerOne","optionOne","clickHandlerTwo","optionTwo","StartMenu","versusComputer","updatePlayers","versusPlayer","pickMarkerX","updateMarkers","pickMarkerO","goingFirst","human","updateTurns","notFirst","computer","components_Options","App","state","turn","gameResult","setState","_this$state","newBoard","unfocusWon","_this$state2","toConsumableArray","gameWon","computerTurn","_this$state3","miniMax","focusWon","findEmptySquares","length","_this$state4","Math","floor","random","emptySquares","forEach","push","checkWin","bestMove","_this$state5","moves","score","i","move","result","bestScore","createSelector","num","document","querySelector","concat","style","background","numbers","Array","from","keys","_i3","showResult","console","log","components_Board","components_StartMenu","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.d1039236.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Square = (props) => {\r\n\r\n  // gameEnded, markSquare\r\n  return (\r\n        <div className={\"board_cell button\" + props.index + (props.gameEnded ? \" ended\" : \" notEnded\")}\r\n                onClick={(event) => props.markSquare(event, props.index)}\r\n        >\r\n          {props.value}\r\n        </div>\r\n  )\r\n};\r\n\r\nexport default Square","import React, {Component} from 'react'\r\n\r\nimport Square from './Square'\r\n\r\nclass Board extends Component {\r\n\r\n  componentDidMount() {\r\n    let {board} = this.props;\r\n    if (this.props.playerCount === 1 && !this.props.humanFirst) {\r\n      this.props.computerRandom(board)\r\n    }\r\n  }\r\n\r\n\r\n  createSquare = (index) => {\r\n    let value;\r\n    if (this.props.board[index] !== \"X\" && this.props.board[index] !== \"O\") {\r\n      value = \"\"\r\n    } else {\r\n      value = this.props.board[index]\r\n    }\r\n\r\n    return (\r\n          <Square\r\n                {...this.props}\r\n                value={value}\r\n                index={index}\r\n                markSquare={this.props.markSquare}\r\n          />\r\n    )\r\n  };\r\n\r\n  returnMenuHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.returnMenu()\r\n  };\r\n\r\n  resetGameHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.resetGame()\r\n  };\r\n\r\n  render() {\r\n    return (\r\n          <React.Fragment>\r\n\r\n            <div className=\"Board\">\r\n                {this.createSquare(0)}\r\n                {this.createSquare(1)}\r\n                {this.createSquare(2)}\r\n                {this.createSquare(3)}\r\n                {this.createSquare(4)}\r\n                {this.createSquare(5)}\r\n                {this.createSquare(6)}\r\n                {this.createSquare(7)}\r\n                {this.createSquare(8)}\r\n            </div>\r\n            <div className=\"Menus btn-wrap\">\r\n              <span className=\"Board_menu btn\" onClick={(event) => this.returnMenuHandler(event)}>Menu</span>\r\n              <span className=\"Board_reset btn\" onClick={(event) => this.resetGameHandler(event)}>Reset</span>\r\n            </div>\r\n          </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Board","import React from 'react'\r\n\r\nconst Options = (props) => {\r\n  return (\r\n        <div className=\"Options\" id={props.idName}>\r\n          <h3>{props.title}</h3>\r\n          <div className=\"btn-wrap\">\r\n             <span className=\"btn\" onClick={props.clickHandlerOne}>\r\n            {props.optionOne}\r\n          </span>\r\n            <span className=\"btn\" onClick={props.clickHandlerTwo}>\r\n            {props.optionTwo}\r\n          </span>\r\n          </div>\r\n        </div>\r\n  )\r\n};\r\nexport default Options","import React, {Component} from 'react'\r\n\r\nimport Options from './Options'\r\n\r\nclass StartMenu extends Component {\r\n  versusComputer = () => {\r\n    let playerCount = 1;\r\n    this.props.updatePlayers(playerCount)\r\n  };\r\n\r\n  versusPlayer = () => {\r\n    let playerCount = 2;\r\n    this.props.updatePlayers(playerCount)\r\n  };\r\n\r\n  pickMarkerX = () => {\r\n    let human = \"X\";\r\n    let computer = \"O\";\r\n    this.props.updateMarkers(human, computer)\r\n  };\r\n\r\n  pickMarkerO = () => {\r\n    let human = \"O\";\r\n    let computer = \"X\";\r\n    this.props.updateMarkers(human, computer)\r\n  };\r\n\r\n  goingFirst = () => {\r\n    let {human} = this.props;\r\n    this.props.updateTurns(true, human)\r\n  };\r\n\r\n  notFirst = () => {\r\n    let {computer} = this.props;\r\n    this.props.updateTurns(false, computer)\r\n  };\r\n\r\n  render() {\r\n    return (\r\n          <React.Fragment>\r\n            {this.props.playerCount === null &&\r\n            <Options\r\n                  {...this.props}\r\n                  title='Against computer or Player?'\r\n                  idName=\"players\"\r\n                  optionOne='Computer'\r\n                  clickHandlerOne={this.versusComputer}\r\n                  optionTwo='Player'\r\n                  clickHandlerTwo={this.versusPlayer}\r\n            />\r\n            }\r\n            {this.props.playerCount && this.props.human === null &&\r\n            <Options\r\n                  title='Play as X or O?'\r\n                  idName=\"markers\"\r\n                  optionOne='X'\r\n                  clickHandlerOne={this.pickMarkerX}\r\n                  optionTwo='O'\r\n                  clickHandlerTwo={this.pickMarkerO}\r\n            />\r\n            }\r\n            {this.props.human && this.props.humanFirst === null &&\r\n            <Options\r\n                  title='Want to go first?'\r\n                  idName=\"turns\"\r\n                  optionOne='Yes'\r\n                  clickHandlerOne={this.goingFirst}\r\n                  optionTwo='No'\r\n                  clickHandlerTwo={this.notFirst}\r\n            />\r\n            }\r\n          </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default StartMenu","import React, {Component} from 'react';\nimport './App.css';\nimport Board from \"./components/Board\";\nimport StartMenu from \"./components/StartMenu\";\n\n\nclass App extends Component {\n\n  state = {\n    board: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n    human: null,\n    computer: null,\n    turn: null,\n    playerCount: null,\n    humanFirst: null,\n    gameEnded: false,\n    gameResult: null\n  };\n\n  // Menus and Options\n  updatePlayers = (playerCount) => {\n    this.setState({playerCount})\n  };\n\n  updateMarkers = (human, computer) => {\n    this.setState({human, computer})\n  };\n\n  updateTurns = (humanFirst, turn) => {\n    this.setState({humanFirst, turn})\n  };\n\n  returnMenu = () => {\n    let newBoard = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n    this.setState({\n      board: newBoard,\n      human: null,\n      computer: null,\n      turn: null,\n      playerCount: null,\n      humanFirst: null,\n      gameEnded: false,\n      gameResult: null\n    })\n  };\n\n  resetGame = () => {\n    const {playerCount, humanFirst} = this.state;\n    let newBoard = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n    this.setState({board: newBoard, gameEnded: false, gameResult: null});\n    this.unfocusWon();\n    if (playerCount === 1 && !humanFirst) {\n      this.computerRandom(newBoard)\n    }\n  };\n\n  // Game Mechanics\n  markSquare = (event, index) => {\n    event.preventDefault();\n    let {human, computer, turn, playerCount, gameEnded} = this.state;\n    let newBoard = [...this.state.board];\n    if (newBoard[index] !== \"X\" && newBoard[index] !== \"O\" && !gameEnded) {\n      newBoard[index] = turn;\n      if (turn === human) {\n        turn = computer\n      } else if (turn === computer) {\n        turn = human\n      }\n      this.setState({board: newBoard, turn});\n      this.gameWon(newBoard, human);\n\n      if (playerCount === 1) {\n        this.computerTurn(newBoard)\n      }\n      if (playerCount === 2) {\n        this.gameWon(newBoard, computer)\n      }\n    }\n  };\n\n  computerTurn = (board) => {\n    let {computer, human, turn} = this.state;\n    let newBoard = [...board];\n    let bestMove = this.miniMax(board, computer).index;\n    newBoard[bestMove] = computer;\n    turn = human;\n    this.gameWon(newBoard, computer);\n    this.setState({board: newBoard, turn})\n  };\n\n  gameWon = (board, turn) => {\n    if (\n          (board[0] === turn && board[1] === turn && board[2] === turn) ||\n          (board[3] === turn && board[4] === turn && board[5] === turn) ||\n          (board[6] === turn && board[7] === turn && board[8] === turn) ||\n          (board[0] === turn && board[3] === turn && board[6] === turn) ||\n          (board[1] === turn && board[4] === turn && board[7] === turn) ||\n          (board[2] === turn && board[5] === turn && board[8] === turn) ||\n          (board[0] === turn && board[4] === turn && board[8] === turn) ||\n          (board[2] === turn && board[4] === turn && board[6] === turn)\n    ) {\n      this.setState({gameEnded: true, gameResult: turn});\n      this.focusWon(board, turn)\n    } else if (this.findEmptySquares(board).length === 0) {\n      this.setState({gameEnded: true, gameResult: 'draw'})\n    }\n  };\n\n  // Computer Mechanics\n  computerRandom = (board) => {\n    let {computer, human} = this.state;\n    let randomSquare = Math.floor(Math.random() * 9);\n    board[randomSquare] = computer;\n    this.setState({board, turn: human})\n  };\n\n  findEmptySquares = (board) => {\n    let emptySquares = [];\n    board.forEach((value, index) => value !== \"X\" && value !== \"O\" ? emptySquares.push(index) : null);\n    return emptySquares\n  };\n\n  checkWin = (board, turn) => {\n    if (\n          (board[0] === turn && board[1] === turn && board[2] === turn) ||\n          (board[3] === turn && board[4] === turn && board[5] === turn) ||\n          (board[6] === turn && board[7] === turn && board[8] === turn) ||\n          (board[0] === turn && board[3] === turn && board[6] === turn) ||\n          (board[1] === turn && board[4] === turn && board[7] === turn) ||\n          (board[2] === turn && board[5] === turn && board[8] === turn) ||\n          (board[0] === turn && board[4] === turn && board[8] === turn) ||\n          (board[2] === turn && board[4] === turn && board[6] === turn)\n    ) {\n      return true\n    } else {\n      return false\n    }\n  };\n\n  miniMax = (board, turn) => {\n    const {human, computer} = this.state;\n    const newBoard = [...board];\n    const emptySquares = this.findEmptySquares(newBoard);\n    const moves = [];\n\n    if (this.checkWin(newBoard, human)) {\n      return {score: -10}\n    } else if (this.checkWin(newBoard, computer)) {\n      return {score: 10}\n    } else if (emptySquares.length === 0) {\n      return {score: 0}\n    }\n\n    for (let i = 0; i < emptySquares.length; i++) {\n      const move = {};\n      move.index = emptySquares[i];\n      newBoard[emptySquares[i]] = turn;\n\n      if (turn === computer) {\n        const result = this.miniMax(newBoard, human);\n        move.score = result.score;\n\n      } else {\n        const result = this.miniMax(newBoard, computer);\n        move.score = result.score\n      }\n      newBoard[emptySquares[i]] = move.index;\n      moves.push(move)\n    }\n\n    let bestMove;\n    if (turn === computer) {\n      let bestScore = -10000;\n      for (let i = 0; i < moves.length; i++) {\n        if (moves[i].score > bestScore) {\n          bestScore = moves[i].score;\n          bestMove = i\n        }\n      }\n    } else {\n      let bestScore = 10000;\n      for (let i = 0; i < moves.length; i++) {\n        if (moves[i].score < bestScore) {\n          bestScore = moves[i].score;\n          bestMove = i\n        }\n      }\n    }\n    return moves[bestMove]\n  };\n\n  // Visual Mechanics\n  focusWon = (board, turn) => {\n    if (board[0] === turn && board[1] === turn && board[2] === turn) {\n      createSelector(0);\n      createSelector(1);\n      createSelector(2)\n    } else if (board[3] === turn && board[4] === turn && board[5] === turn) {\n      createSelector(3);\n      createSelector(4);\n      createSelector(5)\n    } else if (board[6] === turn && board[7] === turn && board[8] === turn) {\n      createSelector(6);\n      createSelector(7);\n      createSelector(8)\n    } else if (board[0] === turn && board[3] === turn && board[6] === turn) {\n      createSelector(0);\n      createSelector(3);\n      createSelector(6)\n    } else if (board[1] === turn && board[4] === turn && board[7] === turn) {\n      createSelector(1);\n      createSelector(4);\n      createSelector(7)\n    } else if (board[2] === turn && board[5] === turn && board[8] === turn) {\n      createSelector(2);\n      createSelector(5);\n      createSelector(8)\n    } else if (board[0] === turn && board[4] === turn && board[8] === turn) {\n      createSelector(0);\n      createSelector(4);\n      createSelector(8)\n    } else if (board[2] === turn && board[4] === turn && board[6] === turn) {\n      createSelector(2);\n      createSelector(4);\n      createSelector(6)\n    }\n\n    function createSelector(num) {\n      return document.querySelector(`.button${num}`).style.background = \"mediumspringgreen\"\n    }\n  };\n\n  unfocusWon = () => {\n    const numbers = Array.from(Array(9).keys());\n    for (let num of numbers) {\n      createSelector(num)\n    }\n\n    function createSelector(num) {\n      return document.querySelector(`.button${num}`).style.background = null\n    }\n  };\n\n\n  showResult = (result) => {\n    if (result) {\n      if (result === 'draw') {\n        return `It's a draw !`\n      } else {\n        return `Winner ${result} !`\n      }\n    }\n  };\n\n  render() {\n    console.log(this.state);\n    return (\n          <div className=\"App\">\n\n            <h1 className=\"App-title\">Tic Tac Toe</h1>\n            {this.state.humanFirst !== null ? (\n                        <Board\n                              {...this.state}\n                              markSquare={this.markSquare}\n                              returnMenu={this.returnMenu}\n                              resetGame={this.resetGame}\n                              computerRandom={this.computerRandom}\n                        />)\n                  : null\n            }\n\n\n            <StartMenu\n                  {...this.state}\n                  updatePlayers={this.updatePlayers}\n                  updateMarkers={this.updateMarkers}\n                  updateTurns={this.updateTurns}\n            />\n\n            <h2 className=\"App-result\">{this.showResult(this.state.gameResult)}</h2>\n\n          </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}